{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// // import CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\n// // import StripeCheckoutButton from \"../../components/stripe-button/stripe-button-component\";\n// // import { CartContext } from \"../../providers/cart/cart.provider\";\n// import \"./checkout.styles.scss\";\n// const ProductDisplay = ({ handleClick }) => (\n//   <>\n//     <div className=\"container\">\n//       <div className=\"product\">\n//         <img\n//           src=\"https://i.imgur.com/EHyR2nP.png\"\n//           alt=\"The cover of Stubborn Attachments\"\n//         />\n//         <div className=\"description\">\n//           <h3>Stubborn Attachments</h3>\n//           <h5>$280.00</h5>\n//         </div>\n//       </div>\n//       <div>\n//         <button\n//           className=\"btn btn-dark\"\n//           type=\"button\"\n//           id=\"checkout-button\"\n//           role=\"link\"\n//           onClick={handleClick}\n//         >\n//           Checkout\n//         </button>\n//       </div>\n//     </div>\n//   </>\n// );\n// const Message = ({ message }) => (\n//   <section>\n//     <p>{message}</p>\n//   </section>\n// );\n// export default function CheckoutPage() {\n//   // const { cartItems, cartTotal } = useContext(CartContext);\n//   const [message, setMessage] = useState(\"\");\n//     return message ? (\n//       <Message message={message} />\n//     ) : (\n//       <ProductDisplay handleClick={handleClick} />\n//     );\n//   };\n// // }\n// import React, { useEffect, useState } from \"react\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import axios from \"axios\";\n// export default function CheckoutPage() {\n//   const [message, setMessage] = useState(\"\");\n//   const size = useWindowSize();\n//   const stripePromise = loadStripe(\"process.env.REACT_APP_STRIPE_PUBLIC_KEY\");\n//   function useWindowSize() {\n//     // Initialize state with undefined width/height so server and client renders match\n//     // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n//     const [windowSize, setWindowSize] = useState({\n//       width: undefined,\n//       height: undefined,\n//     });\n//     useEffect(() => {\n//       // Handler to call on window resize\n//       function handleResize() {\n//         // Set window width/height to state\n//         setWindowSize({\n//           width: window.innerWidth,\n//           height: window.innerHeight,\n//         });\n//       }\n//       // Add event listener\n//       window.addEventListener(\"resize\", handleResize);\n//       // Call handler right away so state gets updated with initial window size\n//       handleResize();\n//       // Remove event listener on cleanup\n//       return () => window.removeEventListener(\"resize\", handleResize);\n//     }, []); // Empty array ensures that effect is only run on mount\n//     return windowSize;\n//   }\n//   const handleClick = async (e) => {\n//     e.preventDefault();\n//     const stripe = stripePromise;\n//     async function getData() {\n//       await axios(\"http://localhost:5000/create-checkout-session\", {\n//         method: \"POST\",\n//       })\n//         .then(function (response) {\n//           return response.json();\n//         })\n//         .then(function (session) {\n//           return stripe.redirectToCheckout({ sessionId: session.id });\n//         })\n//         .then(function (result) {\n//           // If `redirectToCheckout` fails due to a browser or network\n//           // error, you should display the localized error message to your\n//           // customer using `error.message`.\n//           if (result.error) {\n//             alert(result.error.message);\n//           }\n//         });\n//     }\n//   };\n//   const Message = () => {\n//     <section>\n//       <p>{message}</p>\n//     </section>;\n//   };\n//   useEffect(() => {\n//     // Check to see if this is a redirect back from Checkout\n//     const query = new URLSearchParams(window.location.search);\n//     if (query.get(\"success\")) {\n//       setMessage(\"Order placed! You will receive an email confirmation.\");\n//     }\n//     if (query.get(\"canceled\")) {\n//       setMessage(\n//         \"Order canceled -- continue to shop around and checkout when you're ready.\"\n//       );\n//     }\n//   }, []);\n//   return (\n//     <div className=\"container\">\n//       <div className=\"product\">\n//         <div>\n//           {size.width}px / {size.height}px\n//         </div>\n//         <img\n//           src=\"https://i.imgur.com/EHyR2nP.png\"\n//           alt=\"The cover of Stubborn Attachments\"\n//         />\n//         <div className=\"description\">\n//           <h3>Dev Test</h3>\n//           <h5>$280.00</h5>\n//         </div>\n//       </div>\n//       <div>\n//         <button\n//           className=\"btn btn-dark\"\n//           type=\"button\"\n//           id=\"checkout-button\"\n//           role=\"link\"\n//           onClick={handleClick}\n//         >\n//           Checkout\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/jon-michaelnarvaez/stylebyjmsa/client/src/pages/checkout/checkout.component.jsx"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// // import CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\n// // import StripeCheckoutButton from \"../../components/stripe-button/stripe-button-component\";\n// // import { CartContext } from \"../../providers/cart/cart.provider\";\n// import \"./checkout.styles.scss\";\n\n// const ProductDisplay = ({ handleClick }) => (\n//   <>\n//     <div className=\"container\">\n//       <div className=\"product\">\n//         <img\n//           src=\"https://i.imgur.com/EHyR2nP.png\"\n//           alt=\"The cover of Stubborn Attachments\"\n//         />\n//         <div className=\"description\">\n//           <h3>Stubborn Attachments</h3>\n//           <h5>$280.00</h5>\n//         </div>\n//       </div>\n//       <div>\n//         <button\n//           className=\"btn btn-dark\"\n//           type=\"button\"\n//           id=\"checkout-button\"\n//           role=\"link\"\n//           onClick={handleClick}\n//         >\n//           Checkout\n//         </button>\n//       </div>\n//     </div>\n//   </>\n// );\n\n// const Message = ({ message }) => (\n//   <section>\n//     <p>{message}</p>\n//   </section>\n// );\n\n// export default function CheckoutPage() {\n//   // const { cartItems, cartTotal } = useContext(CartContext);\n//   const [message, setMessage] = useState(\"\");\n\n//     return message ? (\n//       <Message message={message} />\n//     ) : (\n//       <ProductDisplay handleClick={handleClick} />\n//     );\n//   };\n// // }\n\n// import React, { useEffect, useState } from \"react\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import axios from \"axios\";\n\n// export default function CheckoutPage() {\n//   const [message, setMessage] = useState(\"\");\n//   const size = useWindowSize();\n//   const stripePromise = loadStripe(\"process.env.REACT_APP_STRIPE_PUBLIC_KEY\");\n//   function useWindowSize() {\n//     // Initialize state with undefined width/height so server and client renders match\n//     // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n//     const [windowSize, setWindowSize] = useState({\n//       width: undefined,\n//       height: undefined,\n//     });\n//     useEffect(() => {\n//       // Handler to call on window resize\n//       function handleResize() {\n//         // Set window width/height to state\n//         setWindowSize({\n//           width: window.innerWidth,\n//           height: window.innerHeight,\n//         });\n//       }\n//       // Add event listener\n//       window.addEventListener(\"resize\", handleResize);\n//       // Call handler right away so state gets updated with initial window size\n//       handleResize();\n//       // Remove event listener on cleanup\n//       return () => window.removeEventListener(\"resize\", handleResize);\n//     }, []); // Empty array ensures that effect is only run on mount\n//     return windowSize;\n//   }\n//   const handleClick = async (e) => {\n//     e.preventDefault();\n//     const stripe = stripePromise;\n//     async function getData() {\n//       await axios(\"http://localhost:5000/create-checkout-session\", {\n//         method: \"POST\",\n//       })\n//         .then(function (response) {\n//           return response.json();\n//         })\n//         .then(function (session) {\n//           return stripe.redirectToCheckout({ sessionId: session.id });\n//         })\n//         .then(function (result) {\n//           // If `redirectToCheckout` fails due to a browser or network\n//           // error, you should display the localized error message to your\n//           // customer using `error.message`.\n//           if (result.error) {\n//             alert(result.error.message);\n//           }\n//         });\n//     }\n//   };\n//   const Message = () => {\n//     <section>\n//       <p>{message}</p>\n//     </section>;\n//   };\n\n//   useEffect(() => {\n//     // Check to see if this is a redirect back from Checkout\n//     const query = new URLSearchParams(window.location.search);\n//     if (query.get(\"success\")) {\n//       setMessage(\"Order placed! You will receive an email confirmation.\");\n//     }\n//     if (query.get(\"canceled\")) {\n//       setMessage(\n//         \"Order canceled -- continue to shop around and checkout when you're ready.\"\n//       );\n//     }\n//   }, []);\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"product\">\n//         <div>\n//           {size.width}px / {size.height}px\n//         </div>\n//         <img\n//           src=\"https://i.imgur.com/EHyR2nP.png\"\n//           alt=\"The cover of Stubborn Attachments\"\n//         />\n//         <div className=\"description\">\n//           <h3>Dev Test</h3>\n//           <h5>$280.00</h5>\n//         </div>\n//       </div>\n//       <div>\n//         <button\n//           className=\"btn btn-dark\"\n//           type=\"button\"\n//           id=\"checkout-button\"\n//           role=\"link\"\n//           onClick={handleClick}\n//         >\n//           Checkout\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}