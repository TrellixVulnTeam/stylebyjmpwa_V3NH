{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/performance\";\nimport \"firebase/analytics\";\nconst app = firebase.initializeApp({\n  apiKey: AIzaSyCXvJVMjsFcNYX9ea7wGokH3F70y5nezEI,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGE_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n});\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const perf = firebase.performance();\nexport const analytics = firebase.analytics().logEvent(\"notification_received\");\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default app;","map":{"version":3,"sources":["/Users/jon-michaelnarvaez/stylebyjmsa/client/src/firebase/firebase.utils.js"],"names":["firebase","app","initializeApp","apiKey","AIzaSyCXvJVMjsFcNYX9ea7wGokH3F70y5nezEI","authDomain","process","env","REACT_APP_AUTH_DOMAIN","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGE_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","auth","perf","performance","analytics","logEvent","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,OAAO,sBAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,aAAT,CAAuB;AACjCC,EAAAA,MAAM,EAAEC,uCADyB;AAEjCC,EAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC,qBAFS;AAGjCC,EAAAA,SAAS,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAHU;AAIjCC,EAAAA,aAAa,EAAEL,OAAO,CAACC,GAAR,CAAYK,wBAJM;AAKjCC,EAAAA,iBAAiB,EAAEP,OAAO,CAACC,GAAR,CAAYO,2BALE;AAMjCC,EAAAA,KAAK,EAAET,OAAO,CAACC,GAAR,CAAYS,gBANc;AAOjCC,EAAAA,aAAa,EAAEX,OAAO,CAACC,GAAR,CAAYW;AAPM,CAAvB,CAAZ;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAvBM;AAyBP,OAAO,MAAMgB,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGvB,QAAQ,CAACuB,SAAT,EAAlB;AACP,OAAO,MAAMgB,IAAI,GAAGvC,QAAQ,CAACwC,WAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGzC,QAAQ,CAACyC,SAAT,GAAqBC,QAArB,CAA8B,uBAA9B,CAAlB;AAEP,MAAMC,QAAQ,GAAG,IAAI3C,QAAQ,CAACsC,IAAT,CAAcM,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMT,IAAI,CAACU,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe1C,GAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/performance\";\nimport \"firebase/analytics\";\n\nconst app = firebase.initializeApp({\n  apiKey: AIzaSyCXvJVMjsFcNYX9ea7wGokH3F70y5nezEI,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGE_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n});\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const perf = firebase.performance();\nexport const analytics = firebase.analytics().logEvent(\"notification_received\");\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default app;\n"]},"metadata":{},"sourceType":"module"}