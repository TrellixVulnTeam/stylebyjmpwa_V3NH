{"ast":null,"code":"// import api from \"../utils/api\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from \"./types\"; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post(\"/api/auth\", body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["/Users/jon-michaelnarvaez/stylebyjmsa/client/src/redux/actions/auth.js"],"names":["axios","setAuthToken","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["// import api from \"../utils/api\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { setAlert } from \"./alert\";\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n} from \"./types\";\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\"/api/auth\");\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register User\nexport const register =\n  ({ name, email, password }) =>\n  async (dispatch) => {\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n    const body = JSON.stringify({ name, email, password });\n    try {\n      const res = await axios.post(\"/api/users\", body, config);\n\n      dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    }\n  };\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n  const body = { email, password };\n\n  try {\n    const res = await axios.post(\"/api/auth\", body);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({ type: LOGOUT });\n"]},"metadata":{},"sourceType":"module"}